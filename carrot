#!/bin/sh

HEADER='\033[95m'
BLUE='\033[94m'
CYAN='\033[96m'
GREEN='\033[92m'
RED1='\033[93m'
RED2='\033[91m'
WHITE='\033[0m'
UNDERLINE='\033[4m'

ver1="22"
ver="$ver1 ~ Update Checking update"
cu="\n${HEADER}Commands usage:\n\ncarrot -cpp <path>\nExecute C/C++ program $RED1(GCC is required / ${RED2}build-essential$RED1 package)$HEADER\n\ncarrot -repeat <string>\nRepeats the string you wrote\n\ncarrot -carrotedit\nOpens the Carrotshell program for you to edit $RED1(${RED2}gedit$RED1 is required)$HEADER\n\ncarrot -remove <file path>\nRemoves specified file\n\ncarrot -pi <package>\nInstalls the specified packagen\n\ncarrot -pr <package>\nRemoves the specified package\n\ncarrot -pu <package>\nUpdates apt and upgrades all packages\n\ncarrot -update\nUpdates Carrotshell\n\n${RED2}Carrotshell V${ver}$WHITE\n"

if [ ! -f ~/.Carrotshell/ini ]; then
    echo "\nInitialization..."
    if [ ! -d ~/.Carrotshell ]; then
        mkdir ~/.Carrotshell
        fi
    echo "Delete this file to re-inizialize Carrotshell!" >> ~/.Carrotshell/ini
    echo "\n${RED1}Super User powers needed to install required packages$WHITE"
    sudo apt install build-essential gedit xfce4-terminal
    fi

if [ "$1" = '-cpp' ]; then
    if [ "$2" = '' ]; then
        echo "\nYou haven't write nothing!\nUsage: carrot -cpp <path>\n"
    else
        echo "\n"
        g++ $2 -o carrotprogbash
        ./carrotprogbash
        rm carrotprogbash
        echo "\n"
    fi

elif [ "$1" = '-repeat' ]; then
    if [ "$2" = '' ]; then
        echo "\nYou haven't wrote nothing!\nUsage: carrot -repeat <string>\n"
    else
        echo "\n$2\n"
    fi

elif [ "$1" = '-carrotedit' ]; then
    echo "\n${RED2}WARNING! You are about to edit the Carrotshell program!$WHITE"
    echo -n "Are you still sure about editing it? [y/n] >> "
    read sas
    if [ "$sas" = 'y' ]; then
        echo "\n${RED1}Opening gedit...$WHITE"
        sudo gedit /usr/bin/carrot
    else
        echo "\n${GREEN}Aborted.$WHITE\n"
    fi

elif [ "$1" = '-remove' ]; then
    if [ "$2" = '' ]; then
        echo "\nYou haven't wrote nothing!\nUsage: carrot -remove <file path>\n${HEADER}Want to remove a directory (folder)?\nType 'carrot -remove ${RED1}-r${HEADER} <directory>'$WHITE\n"
    else
        rm $2 $3
    fi

elif [ "$1" = '-pi' ]; then
    if [ "$2" = '' ]; then
        echo "\nYou haven't wrote nothing!\nUsage: carrot -pi <package>\n"
    else
        echo "\n${RED1}Super User powers needed to install packages$WHITE"
        sudo apt install $2
    fi

elif [ "$1" = '-pr' ]; then
    if [ "$2" = '' ]; then
        echo "\n${RED1}Super User powers needed to remove packages$WHITE"
        echo "\nYou haven't wrote nothing!\nUsage: carrot -pr <package>\n"
    else
        sudo apt remove $2
    fi

elif [ "$1" = '-pu' ]; then
    echo "\n${RED1}Super User powers needed to update apt & upgrade packages$WHITE"
    sudo apt update && sudo apt upgrade

elif [ "$1" = '-update' ]; then
    if [ ! -d ~/.Carrotshell ]; then
        mkdir ~/.Carrotshell
        fi
    cd ~/.Carrotshell/
    wget https://raw.githubusercontent.com/SpheLC/Carrotshell/main/carrot
    echo "\n${RED1}Super User powers needed to update Carrotshell$WHITE"
    echo "${RED1}Press Enter if I ask you a question to confirm moving some files (~/.Carrotshell/carrot to /usr/bin/carrot)$WHITE"
    sudo mv ~/.Carrotshell/carrot /usr/bin
    sudo chmod +x /usr/bin/carrot
    echo "${UNDERLINE}${GREEN}Done!\n $WHITE"

elif [ "$1" = '-help' ]; then
    echo "$cu"
elif [ "$1" = '' ]; then
    echo "$cu"
else
    echo "\n'$1' is an unexpected command"
    echo "$cu"
fi

#Check the version
veronline = (w3m -dump https://raw.githubusercontent.com/SpheLC/Carrotshell/main/version_dontmindme)
if [ $veronline > $ver1 ]; then
    echo "${RED2}   .$WHITE"
    echo "${RED2}  / \ $WHITE"
    echo "${RED2} / ${RED1}! ${RED2}\  ${BLUE}New version ${GREEN}avaiable${BLUE}! (V${veronline})$WHITE"
    echo "${RED2}+-----+\n\n${RED1}'carrot -update' to update!$WHITE"
elif [ $(w3m -dump https://raw.githubusercontent.com/SpheLC/Carrotshell/main/version_dontmindme) < $ver1 ]; then
    echo "${RED2}ERROR: Your version is newer than the original release.\nTry to update Carrotshell to fix this error or just wait some minutes.$WHITE"
    fi

#Carrotshell By Sphe
